<?php
echo "<b>Lesson 15</b><br><br>";


echo "<h3>1. array_map ‚Äì —É–≤–µ–ª–∏—á–∏—Ç—å –∫–∞–∂–¥–æ–µ —á–∏—Å–ª–æ –Ω–∞ 10</h3>";
$numbers = [5, 10, 15, 20];
$increased = array_map(function($num) {
    return $num + 10;
}, $numbers);
print_r($increased);


echo "<h3>2. array_filter ‚Äì –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞</h3>";
$filtered = array_filter($numbers, function($num) {
    return $num % 2 === 0;
});
print_r($filtered);


echo "<h3>3. array_chunk ‚Äì —Ä–∞–∑–±–∏—Ç—å –º–∞—Å—Å–∏–≤ –Ω–∞ —á–∞—Å—Ç–∏</h3>";
$letters = ['a', 'b', 'c', 'd', 'e', 'f'];
$chunks = array_chunk($letters, 2);
print_r($chunks);


echo "<h3>4. in_array ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞</h3>";
$fruits = ['apple', 'banana', 'orange'];
if (in_array('banana', $fruits)) {
    echo "–ë–∞–Ω–∞–Ω –Ω–∞–π–¥–µ–Ω! üçå";
} else {
    echo "–ë–∞–Ω–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!";
}


echo "<h3>5. foreach ‚Äì –≤—ã–≤–æ–¥ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</h3>";
$students = [
    ['name' => '–ò–≤–∞–Ω', 'surname' => '–ò–≤–∞–Ω–æ–≤', 'age' => 20],
    ['name' => '–ú–∞—Ä–∏—è', 'surname' => '–ü–µ—Ç—Ä–æ–≤–∞', 'age' => 22],
    ['name' => '–ê–ª–µ–∫—Å–µ–π', 'surname' => '–°–∏–¥–æ—Ä–æ–≤', 'age' => 19],
];

foreach ($students as $student) {
    echo $student['name'] . ' ' . $student['surname'] . "<br>";
}


echo "<h3>6. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É (>= 21)</h3>";
$adultStudents = array_filter($students, function($student) {
    return $student['age'] >= 21;
});
print_r($adultStudents[1]);


echo "<h3>7. implode –∏ explode</h3>";
$langs = ['PHP', 'JavaScript', 'Python'];
$str = implode(', ', $langs);
echo "–°—Ç—Ä–æ–∫–∞: $str<br>";

$newLangs = explode(', ', $str);
print_r($newLangs);


echo "<h3>8. json_encode –∏ json_decode</h3>";
$data = [
    'title' => '–°–∞–π—Ç –ø–æ–¥ –∫–ª—é—á',
    'price' => 1200,
    'features' => ['–∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å', '—Å–∫–æ—Ä–æ—Å—Ç—å', 'SEO']
];

$json = json_encode($data, JSON_UNESCAPED_UNICODE);
echo "JSON: $json<br>";

$decoded = json_decode($json, true);
print_r($decoded);


echo "<h3>*. —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—É–∑—ã—Ä—å–∫–æ–º</h3>";
function bubbleSort(array $arr): array {
    $n = count($arr);
    for ($i = 0; $i < $n - 1; $i++) {
        // –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –±—ã–ª–∏ –ª–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        $swapped = false;
        for ($j = 0; $j < $n - $i - 1; $j++) {
            if ($arr[$j] > $arr[$j + 1]) {
                // –ú–µ–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ—Å—Ç–∞–º–∏
                $temp = $arr[$j];
                $arr[$j] = $arr[$j + 1];
                $arr[$j + 1] = $temp;
                $swapped = true;
            }
        }
        // –ï—Å–ª–∏ –∑–∞ –ø—Ä–æ—Ö–æ–¥ –Ω–µ –±—ã–ª–æ –Ω–∏ –æ–¥–Ω–æ–π –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ ‚Äî –º–∞—Å—Å–∏–≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
        if (!$swapped) {
            break;
        }
    }
    return $arr;
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
$array = [64, 34, 25, 12, 22, 11, 90];
$sorted = bubbleSort($array);
print_r($array);
echo ('<br>–°—Ç–∞–ª–æ <br>');
print_r($sorted);
echo ('<br>–ü–µ—Ä–µ–≤–µ—Ä–Ω—É–ª–∏ <br>');
$reverse_sort = array_reverse($sorted);
print_r($reverse_sort);